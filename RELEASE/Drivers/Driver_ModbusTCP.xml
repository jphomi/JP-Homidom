<?xml version="1.0"?>
<doc>
<assembly>
<name>
Driver_ModbusTCP
</name>
</assembly>
<members>
<member name="T:Driver_ModbusTCP.My.Resources.Resources">
<summary>
  Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
</summary>
</member>
<member name="P:Driver_ModbusTCP.My.Resources.Resources.ResourceManager">
<summary>
  Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
</summary>
</member>
<member name="P:Driver_ModbusTCP.My.Resources.Resources.Culture">
<summary>
  Remplace la propriété CurrentUICulture du thread actuel pour toutes
  les recherches de ressources à l'aide de cette classe de ressource fortement typée.
</summary>
</member>
<member name="T:Driver_ModbusTCP.Driver_ModbusTCP">
 <summary>Class Driver_ModbusTCP, permet de commander et recevoir des ordres avec les périphériques supportant le protocole ModbusTCP</summary>
 
</member>
<member name="M:Driver_ModbusTCP.Driver_ModbusTCP.GetCommandPlus">
 <summary>
 Retourne la liste des Commandes avancées
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Driver_ModbusTCP.Driver_ModbusTCP.ExecuteCommand(System.Object,System.String,System.Object[])">
 <summary>Execute une commande avancée</summary>
 <param name="MyDevice">Objet représentant le Device </param>
 <param name="Command">Nom de la commande avancée à éxécuter</param>
 <param name="Param">tableau de paramétres</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Driver_ModbusTCP.Driver_ModbusTCP.VerifChamp(System.String,System.Object)">
 <summary>
 Permet de vérifier si un champ est valide
 </summary>
 <param name="Champ"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Driver_ModbusTCP.Driver_ModbusTCP.Start">
 <summary>Démarrer le du driver</summary>
 <remarks></remarks>
</member>
<member name="M:Driver_ModbusTCP.Driver_ModbusTCP.Stop">
 <summary>Arrêter le du driver</summary>
 <remarks></remarks>
</member>
<member name="M:Driver_ModbusTCP.Driver_ModbusTCP.Restart">
 <summary>Re-Démarrer le du driver</summary>
 <remarks></remarks>
</member>
<member name="M:Driver_ModbusTCP.Driver_ModbusTCP.Read(System.Object)">
 <summary>Intérroger un device</summary>
 <param name="Objet">Objet représetant le device à interroger</param>
 <remarks></remarks>
</member>
<member name="M:Driver_ModbusTCP.Driver_ModbusTCP.Write(System.Object,System.String,System.Object,System.Object)">
 <summary>Commander un device</summary>
 <param name="Objet">Objet représetant le device à interroger</param>
 <param name="Commande">La commande à passer</param>
 <param name="Parametre1">La valeur à passer</param>
 <param name="Parametre2"></param>
 <remarks></remarks>
</member>
<member name="M:Driver_ModbusTCP.Driver_ModbusTCP.DeleteDevice(System.String)">
 <summary>Fonction lancée lors de la suppression d'un device</summary>
 <param name="DeviceId">Objet représetant le device à interroger</param>
 <remarks></remarks>
</member>
<member name="M:Driver_ModbusTCP.Driver_ModbusTCP.NewDevice(System.String)">
 <summary>Fonction lancée lors de l'ajout d'un device</summary>
 <param name="DeviceId">Objet représetant le device à interroger</param>
 <remarks></remarks>
</member>
<member name="M:Driver_ModbusTCP.Driver_ModbusTCP.add_devicecommande(System.String,System.String,System.Int32)">
 <summary>ajout des commandes avancées pour les devices</summary>
 <remarks></remarks>
</member>
<member name="M:Driver_ModbusTCP.Driver_ModbusTCP.Add_LibelleDriver(System.String,System.String,System.String,System.String)">
 <summary>ajout Libellé pour le Driver</summary>
 <param name="nom">Nom du champ : HELP</param>
 <param name="labelchamp">Nom à afficher : Aide</param>
 <param name="tooltip">Tooltip à afficher au dessus du champs dans l'admin</param>
 <remarks></remarks>
</member>
<member name="M:Driver_ModbusTCP.Driver_ModbusTCP.Add_LibelleDevice(System.String,System.String,System.String,System.String)">
 <summary>Ajout Libellé pour les Devices</summary>
 <param name="nom">Nom du champ : HELP</param>
 <param name="labelchamp">Nom à afficher : Aide, si = "@" alors le champ ne sera pas affiché</param>
 <param name="tooltip">Tooltip à afficher au dessus du champs dans l'admin</param>
 <remarks></remarks>
</member>
<member name="M:Driver_ModbusTCP.Driver_ModbusTCP.add_paramavance(System.String,System.String,System.Object)">
 <summary>ajout de parametre avancés</summary>
 <param name="nom">Nom du parametre (sans espace)</param>
 <param name="description">Description du parametre</param>
 <param name="valeur">Sa valeur</param>
 <remarks></remarks>
</member>
<member name="M:Driver_ModbusTCP.Driver_ModbusTCP.#ctor">
 <summary>Creation d'un objet de type</summary>
 <remarks></remarks>
</member>
<member name="M:Driver_ModbusTCP.Driver_ModbusTCP.TimerTick(System.Object,System.Timers.ElapsedEventArgs)">
 <summary>Si refresh >0 gestion du timer</summary>
 <remarks>PAS UTILISE CAR IL FAUT LANCER UN TIMER QUI LANCE/ARRETE CETTE FONCTION dans Start/Stop</remarks>
</member>
<member name="M:Driver_ModbusTCP.Driver_ModbusTCP.ouvrir(System.String,System.String)">
 <summary>Ouvrir le port ModbusTCP</summary>
 <param name="Port">Nom/Numero du port</param>
 <remarks></remarks>
</member>
<member name="M:Driver_ModbusTCP.Driver_ModbusTCP.fermer">
 <summary>Fermer le port ModbusTCP</summary>
 <remarks></remarks>
</member>
<member name="M:Driver_ModbusTCP.Driver_ModbusTCP.wait(System.Int32)">
 <summary>Pause pour attendre x msecondes </summary>
 <remarks></remarks>
</member>
<member name="M:Driver_ModbusTCP.Driver_ModbusTCP.traitement(System.String,System.String,System.String,System.String,System.Boolean)">
 <summary>Traite les paquets reçus</summary>
 <remarks></remarks>
</member>
<member name="M:Driver_ModbusTCP.Driver_ModbusTCP.TestWrite">
 <summary>Tester la possiblité d'écrire sur le port ModbusTCP</summary>
 <remarks></remarks>
</member>
<member name="M:Driver_ModbusTCP.Driver_ModbusTCP.ecrire(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
 <summary>Ecrire sur le port ModbusTCP</summary>
 <param name="adresse">Adresse du device : A1...</param>
 <param name="commande">commande à envoyer : ON, OFF...</param>
 <param name="data1">voir description des actions plus haut ou doc ModbusTCP</param>
 <param name="data2">voir description des actions plus haut ou doc ModbusTCP</param>
 <param name="ecriretwice">Booleen : Ecrire l'ordre deux fois</param>
 <remarks></remarks>
</member>
<member name="T:Driver_ModbusTCP.ModbusTCP.Master">
 <summary>
 Modbus TCP common driver class. This class implements a modbus TCP master driver.
 It supports the following commands:
 
 Read coils
 Read discrete inputs
 Write single coil
 Write multiple cooils
 Read holding register
 Read input register
 Write single register
 Write multiple register
 
 All commands can be sent in synchronous or asynchronous mode. If a value is accessed
 in synchronous mode the program will stop and wait for slave to response. If the 
 slave didn't answer within a specified time a timeout exception is called.
 The class uses multi threading for both synchronous and asynchronous access. For
 the communication two lines are created. This is necessary because the synchronous
 thread has to wait for a previous command to finish.
 
 </summary>
</member>
<member name="F:Driver_ModbusTCP.ModbusTCP.Master.excIllegalFunction">
 <summary>Constant for exception illegal function.</summary>
</member>
<member name="F:Driver_ModbusTCP.ModbusTCP.Master.excIllegalDataAdr">
 <summary>Constant for exception illegal data address.</summary>
</member>
<member name="F:Driver_ModbusTCP.ModbusTCP.Master.excIllegalDataVal">
 <summary>Constant for exception illegal data value.</summary>
</member>
<member name="F:Driver_ModbusTCP.ModbusTCP.Master.excSlaveDeviceFailure">
 <summary>Constant for exception slave device failure.</summary>
</member>
<member name="F:Driver_ModbusTCP.ModbusTCP.Master.excAck">
 <summary>Constant for exception acknowledge.</summary>
</member>
<member name="F:Driver_ModbusTCP.ModbusTCP.Master.excSlaveIsBusy">
 <summary>Constant for exception slave is busy/booting up.</summary>
</member>
<member name="F:Driver_ModbusTCP.ModbusTCP.Master.excGatePathUnavailable">
 <summary>Constant for exception gate path unavailable.</summary>
</member>
<member name="F:Driver_ModbusTCP.ModbusTCP.Master.excExceptionNotConnected">
 <summary>Constant for exception not connected.</summary>
</member>
<member name="F:Driver_ModbusTCP.ModbusTCP.Master.excExceptionConnectionLost">
 <summary>Constant for exception connection lost.</summary>
</member>
<member name="F:Driver_ModbusTCP.ModbusTCP.Master.excExceptionTimeout">
 <summary>Constant for exception response timeout.</summary>
</member>
<member name="F:Driver_ModbusTCP.ModbusTCP.Master.excExceptionOffset">
 <summary>Constant for exception wrong offset.</summary>
</member>
<member name="F:Driver_ModbusTCP.ModbusTCP.Master.excSendFailt">
 <summary>Constant for exception send failt.</summary>
</member>
<member name="T:Driver_ModbusTCP.ModbusTCP.Master.ResponseData">
 <summary>Response data event. This event is called when new data arrives</summary>
</member>
<member name="E:Driver_ModbusTCP.ModbusTCP.Master.OnResponseData">
 <summary>Response data event. This event is called when new data arrives</summary>
</member>
<member name="T:Driver_ModbusTCP.ModbusTCP.Master.ExceptionData">
 <summary>Exception data event. This event is called when the data is incorrect</summary>
</member>
<member name="E:Driver_ModbusTCP.ModbusTCP.Master.OnException">
 <summary>Exception data event. This event is called when the data is incorrect</summary>
</member>
<member name="T:Driver_ModbusTCP.ModbusTCP.Master.WriteData">
 <summary>Response data event. This event is called when new data arrives</summary>
</member>
<member name="E:Driver_ModbusTCP.ModbusTCP.Master.OnSendData">
 <summary>Exception data event. This event is called when the data is incorrect</summary>
</member>
<member name="P:Driver_ModbusTCP.ModbusTCP.Master.timeout">
 <summary>Response timeout. If the slave didn't answers within in this time an exception is called.</summary>
 <value>The default value is 500ms.</value>
</member>
<member name="P:Driver_ModbusTCP.ModbusTCP.Master.refresh">
 <summary>Refresh timer for slave answer. The class is polling for answer every X ms.</summary>
 <value>The default value is 10ms.</value>
</member>
<member name="P:Driver_ModbusTCP.ModbusTCP.Master.connected">
 <summary>Shows if a connection is active.</summary>
</member>
<member name="M:Driver_ModbusTCP.ModbusTCP.Master.#ctor">
 <summary>Create master instance without parameters.</summary>
</member>
<member name="M:Driver_ModbusTCP.ModbusTCP.Master.#ctor(System.String,System.UInt16)">
 <summary>Create master instance with parameters.</summary>
 <param name="ip">IP adress of modbus slave.</param>
 <param name="port">Port number of modbus slave. Usually port 502 is used.</param>
</member>
<member name="M:Driver_ModbusTCP.ModbusTCP.Master.connect(System.String,System.UInt16)">
 <summary>Start connection to slave.</summary>
 <param name="ip">IP adress of modbus slave.</param>
 <param name="port">Port number of modbus slave. Usually port 502 is used.</param>
</member>
<member name="M:Driver_ModbusTCP.ModbusTCP.Master.disconnect">
 <summary>Stop connection to slave.</summary>
</member>
<member name="M:Driver_ModbusTCP.ModbusTCP.Master.Finalize">
 <summary>Destroy master instance.</summary>
</member>
<member name="M:Driver_ModbusTCP.ModbusTCP.Master.Dispose">
 <summary>Destroy master instance</summary>
</member>
<member name="M:Driver_ModbusTCP.ModbusTCP.Master.ReadCoils(System.UInt16,System.Byte,System.UInt16,System.UInt16)">
 <summary>Read coils from slave asynchronous. The result is given in the response function.</summary>
 <param name="id">Unique id that marks the transaction. In asynchonous mode this id is given to the callback function.</param>
 <param name="unit">Unit identifier (previously slave address). In asynchonous mode this unit is given to the callback function.</param>
 <param name="startAddress">Address from where the data read begins.</param>
 <param name="numInputs">Length of data.</param>
</member>
<member name="M:Driver_ModbusTCP.ModbusTCP.Master.ReadCoils(System.UInt16,System.Byte,System.UInt16,System.UInt16,System.Byte[]@)">
 <summary>Read coils from slave synchronous.</summary>
 <param name="id">Unique id that marks the transaction. In asynchonous mode this id is given to the callback function.</param>
 <param name="unit">Unit identifier (previously slave address). In asynchonous mode this unit is given to the callback function.</param>
 <param name="startAddress">Address from where the data read begins.</param>
 <param name="numInputs">Length of data.</param>
 <param name="values">Contains the result of function.</param>
</member>
<member name="M:Driver_ModbusTCP.ModbusTCP.Master.ReadDiscreteInputs(System.UInt16,System.Byte,System.UInt16,System.UInt16)">
 <summary>Read discrete inputs from slave asynchronous. The result is given in the response function.</summary>
 <param name="id">Unique id that marks the transaction. In asynchonous mode this id is given to the callback function.</param>
 <param name="unit">Unit identifier (previously slave address). In asynchonous mode this unit is given to the callback function.</param>
 <param name="startAddress">Address from where the data read begins.</param>
 <param name="numInputs">Length of data.</param>
</member>
<member name="M:Driver_ModbusTCP.ModbusTCP.Master.ReadDiscreteInputs(System.UInt16,System.Byte,System.UInt16,System.UInt16,System.Byte[]@)">
 <summary>Read discrete inputs from slave synchronous.</summary>
 <param name="id">Unique id that marks the transaction. In asynchonous mode this id is given to the callback function.</param>
 <param name="unit">Unit identifier (previously slave address). In asynchonous mode this unit is given to the callback function.</param>
 <param name="startAddress">Address from where the data read begins.</param>
 <param name="numInputs">Length of data.</param>
 <param name="values">Contains the result of function.</param>
</member>
<member name="M:Driver_ModbusTCP.ModbusTCP.Master.ReadHoldingRegister(System.UInt16,System.Byte,System.UInt16,System.UInt16)">
 <summary>Read holding registers from slave asynchronous. The result is given in the response function.</summary>
 <param name="id">Unique id that marks the transaction. In asynchonous mode this id is given to the callback function.</param>
 <param name="unit">Unit identifier (previously slave address). In asynchonous mode this unit is given to the callback function.</param>
 <param name="startAddress">Address from where the data read begins.</param>
 <param name="numInputs">Length of data.</param>
</member>
<member name="M:Driver_ModbusTCP.ModbusTCP.Master.ReadHoldingRegister(System.UInt16,System.Byte,System.UInt16,System.UInt16,System.Byte[]@)">
 <summary>Read holding registers from slave synchronous.</summary>
 <param name="id">Unique id that marks the transaction. In asynchonous mode this id is given to the callback function.</param>
 <param name="unit">Unit identifier (previously slave address). In asynchonous mode this unit is given to the callback function.</param>
 <param name="startAddress">Address from where the data read begins.</param>
 <param name="numInputs">Length of data.</param>
 <param name="values">Contains the result of function.</param>
</member>
<member name="M:Driver_ModbusTCP.ModbusTCP.Master.ReadInputRegister(System.UInt16,System.Byte,System.UInt16,System.UInt16)">
 <summary>Read input registers from slave asynchronous. The result is given in the response function.</summary>
 <param name="id">Unique id that marks the transaction. In asynchonous mode this id is given to the callback function.</param>
 <param name="unit">Unit identifier (previously slave address). In asynchonous mode this unit is given to the callback function.</param>
 <param name="startAddress">Address from where the data read begins.</param>
 <param name="numInputs">Length of data.</param>
</member>
<member name="M:Driver_ModbusTCP.ModbusTCP.Master.ReadInputRegister(System.UInt16,System.Byte,System.UInt16,System.UInt16,System.Byte[]@)">
 <summary>Read input registers from slave synchronous.</summary>
 <param name="id">Unique id that marks the transaction. In asynchonous mode this id is given to the callback function.</param>
 <param name="unit">Unit identifier (previously slave address). In asynchonous mode this unit is given to the callback function.</param>
 <param name="startAddress">Address from where the data read begins.</param>
 <param name="numInputs">Length of data.</param>
 <param name="values">Contains the result of function.</param>
</member>
<member name="M:Driver_ModbusTCP.ModbusTCP.Master.WriteSingleCoils(System.UInt16,System.Byte,System.UInt16,System.Boolean)">
 <summary>Write single coil in slave asynchronous. The result is given in the response function.</summary>
 <param name="id">Unique id that marks the transaction. In asynchonous mode this id is given to the callback function.</param>
 <param name="unit">Unit identifier (previously slave address). In asynchonous mode this unit is given to the callback function.</param>
 <param name="startAddress">Address from where the data read begins.</param>
 <param name="OnOff">Specifys if the coil should be switched on or off.</param>
</member>
<member name="M:Driver_ModbusTCP.ModbusTCP.Master.WriteSingleCoils(System.UInt16,System.Byte,System.UInt16,System.Boolean,System.Byte[]@)">
 <summary>Write single coil in slave synchronous.</summary>
 <param name="id">Unique id that marks the transaction. In asynchonous mode this id is given to the callback function.</param>
 <param name="unit">Unit identifier (previously slave address). In asynchonous mode this unit is given to the callback function.</param>
 <param name="startAddress">Address from where the data read begins.</param>
 <param name="OnOff">Specifys if the coil should be switched on or off.</param>
 <param name="result">Contains the result of the synchronous write.</param>
</member>
<member name="M:Driver_ModbusTCP.ModbusTCP.Master.WriteMultipleCoils(System.UInt16,System.Byte,System.UInt16,System.UInt16,System.Byte[])">
 <summary>Write multiple coils in slave asynchronous. The result is given in the response function.</summary>
 <param name="id">Unique id that marks the transaction. In asynchonous mode this id is given to the callback function.</param>
 <param name="unit">Unit identifier (previously slave address). In asynchonous mode this unit is given to the callback function.</param>
 <param name="startAddress">Address from where the data read begins.</param>
 <param name="numBits">Specifys number of bits.</param>
 <param name="values">Contains the bit information in byte format.</param>
</member>
<member name="M:Driver_ModbusTCP.ModbusTCP.Master.WriteMultipleCoils(System.UInt16,System.Byte,System.UInt16,System.UInt16,System.Byte[],System.Byte[]@)">
 <summary>Write multiple coils in slave synchronous.</summary>
 <param name="id">Unique id that marks the transaction. In asynchonous mode this id is given to the callback function.</param>
 <param name="unit">Unit identifier (previously slave address). In asynchonous mode this unit is given to the callback function.</param>
 <param name="startAddress">Address from where the data read begins.</param>
 <param name="numBits">Specifys number of bits.</param>
 <param name="values">Contains the bit information in byte format.</param>
 <param name="result">Contains the result of the synchronous write.</param>
</member>
<member name="M:Driver_ModbusTCP.ModbusTCP.Master.WriteSingleRegister(System.UInt16,System.Byte,System.UInt16,System.Byte[])">
 <summary>Write single register in slave asynchronous. The result is given in the response function.</summary>
 <param name="id">Unique id that marks the transaction. In asynchonous mode this id is given to the callback function.</param>
 <param name="unit">Unit identifier (previously slave address). In asynchonous mode this unit is given to the callback function.</param>
 <param name="startAddress">Address to where the data is written.</param>
 <param name="values">Contains the register information.</param>
</member>
<member name="M:Driver_ModbusTCP.ModbusTCP.Master.WriteSingleRegister(System.UInt16,System.Byte,System.UInt16,System.Byte[],System.Byte[]@)">
 <summary>Write single register in slave synchronous.</summary>
 <param name="id">Unique id that marks the transaction. In asynchonous mode this id is given to the callback function.</param>
 <param name="unit">Unit identifier (previously slave address). In asynchonous mode this unit is given to the callback function.</param>
 <param name="startAddress">Address to where the data is written.</param>
 <param name="values">Contains the register information.</param>
 <param name="result">Contains the result of the synchronous write.</param>
</member>
<member name="M:Driver_ModbusTCP.ModbusTCP.Master.WriteMultipleRegister(System.UInt16,System.Byte,System.UInt16,System.Byte[])">
 <summary>Write multiple registers in slave asynchronous. The result is given in the response function.</summary>
 <param name="id">Unique id that marks the transaction. In asynchonous mode this id is given to the callback function.</param>
 <param name="unit">Unit identifier (previously slave address). In asynchonous mode this unit is given to the callback function.</param>
 <param name="startAddress">Address to where the data is written.</param>
 <param name="values">Contains the register information.</param>
</member>
<member name="M:Driver_ModbusTCP.ModbusTCP.Master.WriteMultipleRegister(System.UInt16,System.Byte,System.UInt16,System.Byte[],System.Byte[]@)">
 <summary>Write multiple registers in slave synchronous.</summary>
 <param name="id">Unique id that marks the transaction. In asynchonous mode this id is given to the callback function.</param>
 <param name="unit">Unit identifier (previously slave address). In asynchonous mode this unit is given to the callback function.</param>
 <param name="startAddress">Address to where the data is written.</param>
 <param name="values">Contains the register information.</param>
 <param name="result">Contains the result of the synchronous write.</param>
</member>
<member name="M:Driver_ModbusTCP.ModbusTCP.Master.ReadWriteMultipleRegister(System.UInt16,System.Byte,System.UInt16,System.UInt16,System.UInt16,System.Byte[])">
 <summary>Read/Write multiple registers in slave asynchronous. The result is given in the response function.</summary>
 <param name="id">Unique id that marks the transaction. In asynchonous mode this id is given to the callback function.</param>
 <param name="unit">Unit identifier (previously slave address). In asynchonous mode this unit is given to the callback function.</param>
 <param name="startReadAddress">Address from where the data read begins.</param>
 <param name="numInputs">Length of data.</param>
 <param name="startWriteAddress">Address to where the data is written.</param>
 <param name="values">Contains the register information.</param>
</member>
<member name="M:Driver_ModbusTCP.ModbusTCP.Master.ReadWriteMultipleRegister(System.UInt16,System.Byte,System.UInt16,System.UInt16,System.UInt16,System.Byte[],System.Byte[]@)">
 <summary>Read/Write multiple registers in slave synchronous. The result is given in the response function.</summary>
 <param name="id">Unique id that marks the transaction. In asynchonous mode this id is given to the callback function.</param>
 <param name="unit">Unit identifier (previously slave address). In asynchonous mode this unit is given to the callback function.</param>
 <param name="startReadAddress">Address from where the data read begins.</param>
 <param name="numInputs">Length of data.</param>
 <param name="startWriteAddress">Address to where the data is written.</param>
 <param name="values">Contains the register information.</param>
 <param name="result">Contains the result of the synchronous command.</param>
</member>
</members>
</doc>
